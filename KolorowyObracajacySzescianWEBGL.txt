<!DOCTYPE HTML>
<html>
    <head>
        <style>
            body {
                margin: 0px;
                padding: 0px;
            }
            
            #myCanvas {
                border: 1px solid #9C9898;
            }
        </style>
        
        <script type="text/javascript" src="glMatrix-1.0.1.min.js">
        </script>
        <script type="text/javascript" src="WebGL.js">
        </script>
                
                
        <script type="text/javascript">
            function initBuffers(gl){ 
                var cubeBuffers = {}
                cubeBuffers.positionBuffer = gl.createArrayBuffer([
                  	// przednia œciana
                    -1, -1,  1,
                     1, -1,  1,
                     1,  1,  1,
                    -1,  1,  1,
         
                    // tylna œciana
                    -1, -1, -1,
                    -1,  1, -1,
                     1,  1, -1,
                     1, -1, -1,
         
                    // górna œciana
                    -1,  1, -1,
                    -1,  1,  1,
                     1,  1,  1,
                     1,  1, -1,
         
                    // dolna œciana
                    -1, -1, -1,
                     1, -1, -1,
                     1, -1,  1,
                    -1, -1,  1,
         
                    // prawa œciana
                     1, -1, -1,
                     1,  1, -1,
                     1,  1,  1,
                     1, -1,  1,
         
                    // lewa œciana
                    -1, -1, -1,
                    -1, -1,  1,
                    -1,  1,  1,
                    -1,  1, -1
                ]);
            		
                // tworzymy bufor kolorów
                var colors = [
                    [1, 0, 1, 1], // przednia œciana - ró¿nowy
                    [0, 1, 0, 1], // tylna œciana - zielony
                    [0, 0, 1, 1], // górna œciana - niebieski
                    [0, 1, 1, 1], // dolna œciana - turkusowy
                    [1, 1, 0, 1], // prawa œciana - ¿ó³ty
                    [1, 0, 0, 1]  // lewa œciana - czerwony
                ];
        		
                var colorVertices = [];
        		
                for (var n in colors) {
                    var color = colors[n];
                    for (var i=0; i < 4; i++) {
                        colorVertices = colorVertices.concat(color);
                    }
                }
        
                cubeBuffers.colorBuffer = gl.createArrayBuffer(colorVertices);
        
                cubeBuffers.indexBuffer = gl.createElementArrayBuffer([
                    0, 1, 2,      0, 2, 3,    // przednia œciana
                    4, 5, 6,      4, 6, 7,    // tylna œciana
                    8, 9, 10,     8, 10, 11,  // górna œciana
                    12, 13, 14,   12, 14, 15, // dolna œciana
                    16, 17, 18,   16, 18, 19, // prawa œciana
                    20, 21, 22,   20, 22, 23  // lewa œciana
                ]);
        
                return cubeBuffers;
            }
            
            function drawStage(gl, cubeBuffers, angle){         
                // ustawiamy k¹t patrzenia na 45 stopni
                // ustawiamy zakres widocznoœci na przedzia³ od 0.1 do 100.0 jednostek
                gl.perspective(45, 0.1, 100);
                gl.identity();
                
                // przesuwamy macierz modelu-widoku
                gl.translate(0, 0, -5);
                // obracamy macierz modelu-widoku wokó³ osi x (przechylamy szeœcian w dó³)
                gl.rotate(Math.PI * 0.15, 1, 0, 0);
                // obracamy macierz modelu-widoku wokó³ osi y
                gl.rotate(angle, 0, 1, 0);
                
                gl.pushPositionBuffer(cubeBuffers);
                gl.pushColorBuffer(cubeBuffers);
                gl.pushIndexBuffer(cubeBuffers);
                gl.drawElements(cubeBuffers);
            }
            
            window.onload = function(){
                var gl = new WebGL("myCanvas", "experimental-webgl");
                gl.setShaderProgram("VARYING_COLOR");
                var cubeBuffers = initBuffers(gl);
                var angle = 0;
                gl.setDrawStage(function(){
                    // aktualizujemy k¹t
                    var angularVelocity = Math.PI / 4; // radianów / sekundê
                    var angleEachFrame = angularVelocity * this.getTimeInterval() / 1000;
                    angle += angleEachFrame;
                    
                    this.clear();
                    
                    drawStage(this, cubeBuffers, angle);
                });
                gl.startAnimation();
            };
        </script>

    </head>
    <body>
        <canvas id="myCanvas" width="578" height="250"
            style="border:1px solid black;"></canvas>
    </body>
</html>